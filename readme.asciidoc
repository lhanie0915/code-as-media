[[introduction]]
== Introduction

This work is a living catalog of sites where code is a media onject in and of its own right.  In other words, we're not interested so much in the code itself (i.e., does it work, how does it perform, etc), but how to we communicate *about* the code or topic, so that people understand or learn either what it does or the topic to which it pertains.  Each chapter covers a specific pattern, along with multiple sample sites that show the ideas in action.  The goal is to begin to build a common vocabulary to think about how people learn to code and to understand the range of projects across the web.  

The current patterns are:

* <<unstructured_sandbox, Unstructured sandbox>>.  Examples of unstructured sites that have interactive code sandboxes as part of the learning experience.  The sandbox allows you to try an example, but does not force or require you to take any specific actions before you can proceed to the next step.
* <<structured_sandbox, Structured sandbox>>.  These sites provide a live sandbox tied to a proscribed course of steps through the material.  You typically have a very specific excercise to complete before you can proceed to the next step in the learning process.
* <<sharing, Sharing>>. Examples of how code can be shared with others for commentary and discussion.
* <<formatting_and_annotation, Formatting and annotation (literate programming)>>.  Examples of decorating the code listing for improved readability.
* <<execution_and_flow, Execution and flow>>.  Examples that illustrate how the execution or structure of code.
* <<live_stack, Live stack>>. Examples of full language and tool stacks, that might either be in-browser, PaaS, or downloadable environments.
* <<finding_and_searching, Finding and searching>>.  Examples of sites related to finding specific examples or reference material.
* <<evolution, Evolution>>.  Examples of how code is shown to change or evolve over time.


The catalog is documents specific sites or examples of each category in an effort to help understand the full space of code commentary and activity.  















