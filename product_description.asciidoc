== Overview

O'Reilly's future depends on creating tools to help people learn in new, more effective ways that go beyond books.  One key challenge to overcome is that learning almost any new tool, particularly in emerging areas like Data Science, increasingly depends on having a sophisticated stack of components and dependencies installed on your development machine.  

In the past, we've tried to rely on documentation or installation instructions for setting up these environments.  However, for everything but the simplest toolsets, this is an unworkable approach that leads to countless hours of frustration for authors and readers alike:  

* Inconsistent package mangers.  Each platform has its own package management system -- on linux there's apt and yum, on mac there's brew and fink, and windows is just a mess
* Language dependencies.  A book might on Rails require Ruby 1.9.3, but user's Mac has 1.8.7. So, the user has to upgrade, which can be a real challenge for someone just getting into a new area.  
* System dependencies.  For example, to compile many open source tools on a mac you need gcc, but that's not supplied on Mac OS by default, so you have to download XCode
* Framework-specific package managers.  Each language set and tool has a profusion of specialized tools just for it.  For example, Python has setuptools, easy_install, or pip, any one of which might be a users preference.
* Required services.  Most frameworks require at least one, if not more, running services.  So, a Rails app might require a database (postgres or mysql), a webserver (thin, webrick, or the built-in service),  a job monitoring system (like god or monit), a caching solution, and a noSql datastore (redis, mongo, etc).  Each of these services must be installed, configured, and started before you can run the app.
* Libraries.  Once you've got the system and languages dependencies, you still might need a variety of libraries configured and installed.  These can sometime go relatively smoothly (like installing nuympy or scipy under Ubuntu), or can be incredibly painful (like installing Imagemagick under Mac OSX).

So, there is a combinatorial explosion of options and difficulties in setting up a working stack.  Furthermore, the types of issues encountered are typically the ones most developers are weakest in -- system administration.  Our authors and learners alike spend untold hours of frustration trying to get a system running even before they've typed a single line of code that relates to the topic of the book.  

This pain point creates an opportunity for O'Reilly to offer a differentiated learning environment that I'm tentatively calling "Stack in a Box."   (We'll need a better term.)  This will allow us to create a smooth learning experience that is comparable to the solutions that are on the market now, but that address the constraints that we face as a media company.

=== Current Solutions

There is a clear demand for interactive learning environments.  We can see this in the success of two broad categories of products:  online code execution environments sites (like Codecademy) and platform as a service companies (like Heroku).  Each of these approaches is being used as a way to help developers learn new tools in ways that:

* Allow them to immediately start learning the tool in a smooth, integrated enviroment
* Bundle content (tutorials, narrative text, images, videos, etc) along with the environment
* Lower the barrier to entry to learning the concept or tool

The following sections describe these solutions in more detail.

=== Online code execution environments (Codecademy, etc)

Online code execution environments like Codecademy, Code School, various "Try" sites (http://tryruby.org/, http://try.github.com/, etc), and the iPython Notebook are incredibly popular.  Rather than struggling with a bunch of frustrating sysadmin tasks, a user's first learning experience is a beautifully designed experience with a live coding environment embedded directly into the content.  While this is often an ideal platform, creating these types of fully online systems at O'Reilly poses a number of challenges:

*  Engineering talent.  Creating a working interactive interpreter for non-Javascript based languages is a considerable engineering challenge.  Not only do we have to create a UI, but we also need to create messaging infrastructure, a command interpreter, a session manager, and a host of other components.  Running this infrastructure at scale would be incredibly resource and time intensive.
* Profusion of environments and tools.  Most of the sites like Codecademy and Code School are geared at beginners, so they tend to cover rather limited features of the various languages and tools.  Since our material is geared towards advanced topics, we'd need a much more robust interpreter.  While we might be able to develop something around general purpose languages like Ruby or Python, it would be very difficult with emerging languages (go, haskell, scala, etc) and tools (hadoop, pig, hive.)
* Security.  Any environment that runs shell commands is by it's nature insecure.  It's a a shell injection attack waiting to happen.     

=== Platform as a Service (Paas)

The success of "Platform as a Service" companies like Heroku, Engine Yard, Joyent, and others is undoubtedly due in no small part to the way that they have abstracted away all these complex issues.  The developer can simply focus on writing his or her code, and then "push" it up into a platform that has all these dependencies and issues solved.  But, while these systems are a joy to use when deploying code to production, they still leave the problems of a local development environment up to the developer.  He or she still has to replicate the essential application services (database, services, dependencies, etc) on his or her machine.

Again, either replicating this environment or using existing services presents a number of challenges:

* Inconvenient to the user.  As noted, most services (like Heroku) are for hosting a final application, but the need to push changes every time you make a modification quickly becomes frustrating and aggravating.
* Limited stacks.  PaaS providers have excellent support for the major stacks (Python, Rails, Node.js, etc), but they don't yet have good support the sort of specialized tools we'd like to write about. 
* Engineering talent.  Setting up a PaaS service is well beyond the engineering capabilities of O'Reilly for the foreseeable future.  We could certainly partner with a company like Heroku, but that still leaves the previously noted problems.

=== O'Reilly "Stack Express" project

"Stack Express" is a concept for a learning environment that takes advantage of the explosion in DevOps tools for system automation (puppet, chef, etc) and virtualization (vagrant, vmware, etc).  The basic idea is:

* We create a puppet manifest for each book that defines the system dependencies and tools.  
* In addition to the tools described in the book, we can install an offline version of the content itself as a Chimera app, all code examples, any required data files, videos, or other applications (for example).  The Chimera app could include a live unix shell directly onto the box.
* We use Vagrant to bundle this material into a virtualized system image that can be run in VirtualBox, VMWare, Parallels, or other system.  
*  The user buys the image files directly through oreilly.com. We've got a product type (CD image) to handle this, so these images can be purchased just like any digital asset.  

Once the user buys the image, they start it using VirtualBox (or Vagrant), and opens the site "http://localhost" in their browser to start the content.  From that point on, everything looks like Chimera (with the exception of the social components).

This approach, while not perfect, has several compelling advantages:

* No configuration.  We're shipping the user everything they need, already configured and running.  They just need to open a browser.
* Scalable.  Since we're only shipping a file, there is no need for complex web infrastructure or operations.  The apps run totally locally.  
*  Flexible.  We can ship anything that can be installed in Ubuntu, which is practically everything on our list.  (Microsoft products are an exception.)
* Secure.  Because the system is running as a virtualized instance on a single users machine, we have no security exposure at all.
* Fast.  Since we're shipping the tool itself, we don't have to develop interpreters or gateways for language or tool.  This means that we can have a box ready to go as soon as the author is done with the content.
* Compatible with existing processes.  From the authors point of view, this looks like any other Atlas projects.  They'll just be able to drop in a shell where the user can run commands.  
* Ready for oreilly.com on day 1.  There is no integration work require -- we could sell these right now.  

The downsides include:

* Dependent on VirtualBox and Vagrant on the user's machine.  So, these would not be fully standalone files.  However, Vagrant is an incredibly important tool that developers should be familiar with, so the more we can promote it the more "normal" this will seem.
* Large images.  Since we're basically shipping an entire disk image, the file sizes could be large.  We could probably mitigate this by having a small base image, like Damn Small Linux, rather than the full Ubuntu images.  However, the file sizes are likely to on par with what we're doing with video now.
* New product concept.  The "Online code execution environment" model is becoming firmly established in people's minds as a concept.  We'd need to create a case for why this approach is compelling enough to merit the extra hassle of using a tool like VirtualBox (or VMWare, or whatever) as an image.






