== Design Ideas

This is a compilation of ideas for different approaches we might take in making a live environment.\

=== Code Terminal

In this, we'd use something like https://github.com/chrisdone/jquery-console[JQuery Console] to capture user input in the browser and then send it to an interpreter so it can be evaluated.  The backend options are:

* Some https://github.com/kripken/emscripten[Emscripten] compiled version of Ruby, Python, etc
* A backend processor on a remote server

Here's an example of how this might looks:

image::images/terminal.png[]

Alternatively, we might have a more "file-like" approach, where you'd enter an entire file so that you could execute it, like this:

image::images/terminal_filemode.png[]

Note that in this version, you enter code into an ACE editor and then press the run button.  The output is directed to a collapsible output window in the sidebar.  Also, for fun, it has a "gist" button that would allow you to save this to a gist in your own github account.    

=== Heroku Sandbox

This is a coding in an environment similar to http://runnable.com/[runnable.com].  You'd be able to buy a product in Atlas, fork it to your account, and then work with it as you read through a book.

image::images/code_sandbox.png[]

The main parts are:

Login to GitHub::
   This signs you into github and connects you to the correct repo.
Push to Heroku::
   I'm not sure if this is even possible, but the idea is that the user provides some heroku credentials that would allow a worker-like process to push the repo up to their account on Heroku.  We would capture STDOUT from the worked and send it into the console window so that you could see what was going on.
File Selector::
   This is like what's in Atlas now -- you'd be able to select files and navigate around.
Editor::
   Basically, this is the Ace editor as we have it now.  There would be a simple set of menus / buttons to allow you to save, create new files, search and replace, or view the file at different points in its commit history.
Console::
   This window displays the output from the "Push to Heroku" process.  Again, it's basically STDOUT on a worker wired up via the Pusher API.
   

